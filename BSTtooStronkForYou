import java.util.*;
//convertme! aHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3RyYWNrLzRNbU82MzFDZHh1Rk9tMThVVmJoa3A/c2k9RGJfS1MtWWJTckNQN2VXYmdKeE5vZw== [promise it isnt porn]
/**
 * @author Nitin Armstrong (The One and Only) [SO tom (Row Solution) and Jinay (helping me fully understand balance and fix my f***d up insert]
 * @version 4.20
 * The Canonical BST with a brand new balance and print function
 */
public class BSTTooStronkForYou <T> {
    /** ___ ___ _____ _____         ___ _                _   ___      __   __        
     * | _ ) __|_   _|_   _|__  ___/ __| |_ _ _ ___ _ _ | |_| __|__ _ \ \ / /__ _  _ 
     * | _ \__ \ | |   | |/ _ \/ _ \__ \  _| '_/ _ \ ' \| / / _/ _ \ '_\ V / _ \ || | 
     * |___/___/ |_|   |_|\___/\___/___/\__|_| \___/_||_|_\_\_|\___/_|  |_|\___/\_,_|
     * 
     */

    public BSTNode <T> root;
    public ArrayList<Row>  rows = new ArrayList<>();

    /**
     * grabs the node list and prints all the branches/leaves with the correctish formatting 
     *
     */
    void printTree(){

        print_re();

        for(int x = 0; x < rows.size(); x++){
            ArrayList<BSTNode> temp = rows.get(x).getNodeList();
            for (int y = 0; y < temp.size(); y++){
                System.out.print(temp.get(y).getVal()+"\t"); //printer
            }
            System.out.println("");
        }
    }

    /**
     * The recursive print method. We get technical and use Queues. If you dont know what a queue is [stop teaching] Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner
     * We check the left and right lists and then put them in the printer for printing in the above method.
     */
    private void print_re(){
        ArrayList<BSTNode> tempList = new ArrayList<>();
        Queue<BSTNode> q = new LinkedList<>(); //FIFO vs FILO
        q.add(root);
        while (!q.isEmpty()) {
            while (!q.isEmpty()) {
                tempList.add(q.poll());
            }
            ArrayList<BSTNode> temp = (ArrayList)tempList.clone();
            rows.add(new Row(temp));
            for (int x = 0; x < tempList.size(); x++) {
                if (tempList.get(x).getLeft() != null) {
                    q.add(tempList.get(x).getLeft());
                }
                if (tempList.get(x).getRight() != null) {
                    q.add(tempList.get(x).getRight());
                }
            }
            tempList.clear();
        }
    }

    /**
     * This is the method called for balancing the tree. Fixes up the arraylist, pulls the working root and then inserts into the next method for balancing around it 
     * (thought he wanted a hyper effecient tree, this will do)
     */

    public  void balance(){
        if (root != null){
            ArrayList<BSTNode<T>> moarNodes;
            moarNodes = inOrderAdd(root);
            if (moarNodes != null)
                root = balance_re(moarNodes);
        }

    }

    /**
     * The recursive element for balancing the tree and generating subtrees, keeps splitting the left and right lists and spits out the new root.
     *
     * @param treeList A parameter
     * @return The return value
     */
    public BSTNode balance_re(ArrayList<BSTNode<T>> treeList){

        if(treeList.size() == 0) {
            return null;
        }
        BSTNode<T> temp = treeList.get(treeList.size() / 2);
        temp.setLeft(balance_re( new ArrayList<BSTNode<T>>(treeList.subList(0, treeList.size() / 2)))); //left subtree
        temp.setRight(balance_re(new ArrayList<BSTNode<T>>(treeList.subList((treeList.size() / 2) + 1, treeList.size())))); //right subtree

        return temp; //temp serves as the node which is the root of the left and right subtrees

    }

    /**
     * insert a single element into the tree and is used later for comparison
     * @param in the element thats inserted
     */
    public void insert(T ting) {
        if (ting == null) return;
        BSTNode <T> test = new BSTNode<T>();
        test.set(ting);
        if (root == null) {
            root = test;
        } else {
            insert_re(root, test);
        }
    }

    /**
     * This is the recursive element for inserting nodes/elements into the BST, loops and checks until its done.
     *
     * @param parent The previous that acts like the element that is the standard thats compared to
     * @param insert The new element that is compared to parent so it goes either left or right
     */
    private void insert_re(BSTNode parent, BSTNode insert) {
        if (parent.getc().compareTo(insert.getc()) > 0) {
            if (parent.getLeft() == null) {
                parent.setLeft(insert);
            } else {
                insert_re(parent.getLeft(), insert);
            }
        } else {
            if (parent.getRight() == null) {
                parent.setRight(insert);
            } else {
                insert_re(parent.getRight(), insert);
            }
        }
    }

    /**
     * adds the elements to the tree in order with comparison and and then spits out the finished list
     *
     * @param insertMeAgain the parent of the BST branches
     * @return The finished treeList
     */
    public ArrayList<BSTNode<T>> inOrderAdd(BSTNode<T> insertMeAgain){
        ArrayList<BSTNode<T>> treeList = new ArrayList <BSTNode<T>>();

        if(insertMeAgain.getLeft() !=null) {
            treeList.addAll(inOrderAdd(insertMeAgain.getLeft())); 
        }

        treeList.add(insertMeAgain);
        if(insertMeAgain.getRight() != null) { //Mr.Alesund forgive me [get_right is a famous CS player]
            treeList.addAll(inOrderAdd(insertMeAgain.getRight()));
        }

        return treeList;
    }

    private class BSTNode <X>{ //cant do .penis here (remember the reason why we do private inner classes)
        private X val;
        private BSTNode left;
        private BSTNode right;

        BSTNode getLeft() {return left;}

        BSTNode getRight() {return right;}

        void setLeft(BSTNode bn) {left = bn;}

        void setRight(BSTNode bn) {right = bn;}

        X getVal() {return val;}

        void set(X v) {val = v;}

        Comparable getc() { return (Comparable) val;}
    }
    private class Row{ //or here //ps SO for tom for helping me with his Row solution, this is a huge part for the recursive printer and is used for the logic behind getting the correct rows
        private ArrayList<BSTNode> nodeList;
        /**
         * The constructor used for row that initialises it
         *
         * @param nodeLista A parameter
         */
        public Row(ArrayList  nodeLista){        
            nodeList = nodeLista;
        }

        /**
         * getter used for nodeList
         *
         * @return nodeList for reading in the recursive printer for output later
         */
        public ArrayList<BSTNode> getNodeList() {
            return nodeList;
        }

        /**
         * Setter used for nodelist
         *
         * @param nodeSki specific node which is used for added the elements to the node list.
         */
        public void setNodeList(ArrayList<BSTNode> nodeSki) {
            nodeList = nodeSki;
        }
    }
}
